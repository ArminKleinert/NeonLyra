; Parse infix operations for parsing imperative languages which treat = as a setter.
; This is a heavily edited conversion of https://github.com/osoleve/Scheme-Infix-Calculator by osoleve (https://github.com/osoleve)
(module infix
  ((shunting-yard shunting-yard)
   (eval-rpn))

(let ((open-bracket (symbol "("))
      (close-bracket (symbol ")"))
      
      (default-binds
  (map-of
    ['associativity-of
      (lambda (op)
        (cond
          ((contains? '(^ ** = += -= *= /= %= mod= <<= >>= &= ^= |=) op) 'right)
          (else 'left)))]

    ['precedence-of
    (lambda (op)
      (cond
        ((contains? '(= += -= *= /= %= mod= <<= >>= &= ^= |=) op) 1)
        ((contains? '(|| or) op) 2)
        ((contains? '(&& and) op) 3)
        ((contains? '(|) op)     4)
        ((contains? '(^ **) op)  5)
        ((contains? '(&) op)     6)
        ((contains? '(== !=) op) 7)
        ((contains? '(< > <= >=) op) 8)
        ((contains? '(<< >>) op) 9)
        ((contains? '(+ -) op)   10)
        ((contains? '(* / %) op) 11)
        ((contains? '(! not ++ --) op) 12)
        ((contains? '(.) op)     13)
        (else                    0)))]
        
    ['unary-op? (lambda (sym) (contains? '(! ++ -- not) sym))]

    ['bin-op? (lambda (sym) (contains? '(= += -= *= /= %= mod= <<= >>= &= ^= |= || or && and | ^ & ** ^ == != < > <= >= + - * / % .) sym))]
        ))
        
        
    (lyra-binds
  (map-of
    ['associativity-of
      (lambda (op)
        (cond
          ((contains? '(^ ** ∈ ∉ empty? not ) op) 'right)
          (else 'left)))]

    ['precedence-of
      (lambda (op)
        (cond
          ((contains? '(∈ ∉) op) 1)
          ((contains? '(or) op) 2)
          ((contains? '(and) op) 3)
          ((contains? '(bit-or) op)     4)
          ((contains? '(^ **) op)  5)
          ((contains? '(bit-and) op)     6)
          ((contains? '(= not= ≠) op) 7)
          ((contains? '(< > <= >= ≥ ≤) op) 8)
          ((contains? '(bit-shl bit-shr) op) 9)
          ((contains? '(+ -) op)   10)
          ((contains? '(* / %) op) 11)
          ((contains? '(empty? not ⋅ inc dec) op) 12)
          (else                    0)))]

    ['unary-op? (lambda (sym) (contains? '(empty? inc dec not) sym))]

    ['bin-op? (lambda (sym) (contains? '(∈ ∉ or and bit-or ^ ** bit-and == != = not= ≠ < > <= >= ≥ ≤ bit-shl bit-shr + - * / % ⋅) sym))]
        )))

(define (operator? symbol binds)
  (> ((map-get binds 'precedence-of) symbol) 0))

;; Actions to take if the token in the stmt is an operator
(define (operator-actions stmt stack binds)
  (let* ((token-precedence ((map-get binds 'precedence-of) (car stmt)))
         (token-assoc ((map-get binds 'associativity-of) (car stmt)))
         (stack-oper (if (not (null? stack))
                         (car stack)
                         '()))
         (stack-precedence (if (not (null? stack-oper))
                               ((map-get binds 'precedence-of) stack-oper)
                               0)))
    (cond ((or (and (eq? token-assoc 'left)
                    (<= token-precedence stack-precedence))
               (and (eq? token-assoc 'right)
                    (< token-precedence stack-precedence)))
           (cons stack-oper (%shunting-yard stmt (cdr stack) binds)))
          (else (%shunting-yard (cdr stmt) (cons (car stmt) stack) binds)))))

(define (stack-operations stack binds)
  (cond ((and (not (null? stack))
              (eq? (car stack) open-bracket))
         (error "Unbalanced parenthesis"))
        ((null? stack) '())
        (else (cons (car stack) (%shunting-yard '() (cdr stack) binds)))))

(define (%shunting-yard stmt stack binds)
  "Converts infix-notation mathematical equations into
postfix-notation mathematical equations, using an
implementation of Dijkstra's Shunting-yard Algorithm."
  (cond ((null? stmt)
         (stack-operations stack binds))
        ((number? (car stmt))
         (cons (car stmt) (%shunting-yard (cdr stmt) stack binds)))
        ((operator? (car stmt) binds)
         (operator-actions stmt stack binds))
        ((list? (car stmt))
         (%shunting-yard (cdr stmt) (cons (car stmt) stack binds)))
        ((eq? (car stmt) open-bracket)
         (%shunting-yard (cdr stmt) (cons (car stmt) stack binds)))
        ((eq? (car stmt) close-bracket)     
         (if (eq? open-bracket (car stack))
             (%shunting-yard (cdr stmt) (cdr stack) binds)
             (cons (car stack) (%shunting-yard stmt (cdr stack) binds))))
        (else (cons (car stmt) (%shunting-yard (cdr stmt) stack binds)))))

(define (shunting-yard stmt binds)
  (%shunting-yard (map-eager (lambda (expr) (if (list? expr) (shunting-yard expr binds binds) expr)) stmt) '() binds))


;;;
; Evaluation:

(define (%eval-rpn input output binds)
  (cond
    ((empty? input)
      output)
    ((list? (car input)) ; Recurse for sub-expressions
      (%eval-rpn (cdr input) (cons (car (%eval-rpn (car input) '() binds)) output) binds))
    (((map-get binds 'unary-op?) (car input)) ; Unary operation (op arg)
      (%eval-rpn (cdr input) (cons (list (car input) (car output)) (cdr output)) binds))
    (((map-get binds 'bin-op?) (car input)) ; Binary op (op arg1 arg2)
      (%eval-rpn (cdr input) (cons (list (car input) (cadr output) (car output)) (cddr output)) binds))
    (else ; atom => return put self on output
      (%eval-rpn (cdr input) (cons (car input) output) binds)) ; Number
    ))

(define (eval-rpn input binds)
  (%eval-rpn input '() binds))

(def-macro (infix-to-prefix bindings & exprs)
  (car (eval-rpn (shunting-yard t bindings) bindings)))

(def-macro (infix->lyra & exprs)
  (car (eval-rpn (shunting-yard t lyra-binds) lyra-binds)))


(comment let ((t '(a = 9 + 9 + 9 + 9 * ! 8)))
  (println! (shunting-yard t default-binds))
  (println! (car (eval-rpn (shunting-yard t default-binds) default-binds))))

(comment let ((t '(a = 9 + 9 + 9 + 9 * 8)))
  (println! (shunting-yard t lyra-binds))
  (println! (car (eval-rpn (shunting-yard t lyra-binds) lyra-binds))))

(comment let ((t '(99 = 9 + 9 + 9 + 9 * 8)))
  (println! (infix->lyra t)))
)
)
