(define (g n p)
  (cond (not (< 1 p)) 1
        (not (< p (dec n))) 1
        else (foldl (lambda (res q) (+ res (if (> q (- n p)) 0 (g (- n p) q)))) 1 (range 2 p))))

(define (9-billion-names rows)
  (foldl
    (lambda (res n)
      (string-append
        (apply string-concat res
          (map-eager
            (lambda (p) (string-append (->string (g n p)) " "))
            (range 1 n)))
        "\n"))
    ""
    (range 1 (inc rows))))

(define (nine-billion-names row column)
  (cond (not (< 1 column)) 1
        (not (< column (dec row))) 1
        
        ;(<= row 0) 0
        ;(<= column 0) 0
        ;(< row column) 0
        ;(= row 1) 1
        else (let ((addend (nine-billion-names (dec row) (dec column)))
                   (augend (nine-billion-names (- row column) column)))
	            (+ addend augend))))
 
(define (print-row! row)
  (apply string-concat
    (map
      (lambda (x)
        (string-concat "" (nine-billion-names row x) \space))
      (range 1 row))))
 
(define (print-triangle! rows)
  (foldl
    (lambda (res current)
      (string-concat res (print-row! current) "\n"))
    ""
    (range 1 rows)))

    
(9-billion-names 25)
;(print-triangle! 25)
