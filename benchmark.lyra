

; xs = (n,m,...)
; xs = (m) if only 1 element remains
(define (ack-h xs)
  (cond (= (size xs) 1) ; only result in list
          (car xs) ; m
        (= (car xs) 0) ; n is 0: (cons m-1 rest)
          (ack-h (cons 1 (cons (dec (cadr xs)) (cddr xs))))
        (= (cadr xs) 0) ; m is 0: (cons n+1 rest)
          (ack-h (cons (inc (car xs)) (cddr xs)))
        else ; Default: (cons n-1 (cons m (cons m-1 rest)))
          (ack-h (cons (dec (car xs)) (cons (cadr xs) (cons (dec (cadr xs)) (cddr xs)))))))

(define (ack m n)
  (ack-h (list n m)))

(def-macro (test-performance text expr)
  (list 'println! (list 'string-concat (list 'ljust  text 50) (list '->string (list 'measure! 'runs (list 'lambda () expr))))))

(let ((runs 50)
      (r (range 0 100)))
      

(test-performance "Many math ops:" (-> 5 (+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)))

(test-performance "Without -> :" (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ 5 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5))

(let ((l (lambda (n) (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ 5 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) n))))
  (test-performance "Many math ops (lambda):" (l 5 )))

(let ((ops (foldr compose id (list (partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)))))
  (test-performance "Same as partials with composition:" (ops 5)))

(test-performance "(ack 3 4)" (ack 3 4))
(test-performance "lazy sequences" (->> -500 (iterate inc) (filter (lambda (n) (> n 0))) (map inc) (filter odd?) (map inc) (map (partial * 211)) (remove (lambda (n) (= (rem n 5) 0))) (take 50)))

(load! "core/sort.lyra")
(let ((sequence (reverse (range 0 5000))))
  (test-performance "Sort 5000 elements:" (sort sequence)))

(load! "core/random.lyra")
(let ((sequence (range 0 5000)))
  (test-performance "Shuffle 5000 elements:" (shuffle sequence 0xC0FFEE)))
)


(comment
Times in milliseconds.

0.1.1
Ruby:
  Many math ops:                                    0.17283199999999999
  Without -> :                                      0.167156
  Many math ops (lambda):                           0.18175750000000002
  Same as partials with composition:                0.3615785
  (ack 3 4)                                         1270.993801
  lazy sequences                                    90.884589
  Sort 5000 elements:                               1123.7094325
  Shuffle 5000 elements:                            1250.69714
jruby:
  Many math ops:                                    1.259
  Without -> :                                      0.7795
  Many math ops (lambda):                           0.903
  Same as partials with composition:                1.6555
  (ack 3 4)                                         2373.7315
  lazy sequences                                    188.454
  Sort 5000 elements:                               1767.841
  Shuffle 5000 elements:                            1942.1085
truffleruby
  Many math ops:                                    3.2715
  Without -> :                                      2.3735
  Many math ops (lambda):                           2.4485
  Same as partials with composition:                3.527
  (ack 3 4)                                         3539.3155
  lazy sequences                                    323.72400000000005
  Sort 5000 elements:                               2212.497
  Shuffle 5000 elements:                            2260.6495

0.1.2
Ruby:
  Many math ops:                                    0.159796
  Without -> :                                      0.161885
  Many math ops (lambda):                           0.1703845
  Same as partials with composition:                0.36569799999999997
  (ack 3 4)                                         1281.8762375000001
  lazy sequences                                    89.671997
  Sort 5000 elements:                               1119.8436295000001
  Shuffle 5000 elements:                            1244.8593765
jruby:
  Many math ops:                                    3.9115
  Without -> :                                      1.6685
  Many math ops (lambda):                           1.3825
  Same as partials with composition:                3.3415
  (ack 3 4)                                         2334.4045
  lazy sequences                                    184.19299999999998
  Sort 5000 elements:                               1664.8805
  Shuffle 5000 elements:                            1873.5955000000004
truffleruby
  Many math ops:                                    2.731
  Without -> :                                      1.9755
  Many math ops (lambda):                           1.5955
  Same as partials with composition:                3.1155
  (ack 3 4)                                         3507.0519999999997
  lazy sequences                                    321.69000000000005
  Sort 5000 elements:                               2127.54
  Shuffle 5000 elements:                            2199.5555
)

