(define (sum-of-divisors n)
  (->> (iterate inc 2)
    (take-while (lambda (x) (< x (/ n 2))))
    (filter (lambda (x) (= (rem n x) 0)))
    (sum)))

; xs = (n,m,...)
; xs = (m) if only 1 element remains
(define (ack-h xs)
  (cond (= (size xs) 1) ; only result in list
          (car xs) ; m
        (= (car xs) 0) ; n is 0: (cons m-1 rest)
          (ack-h (cons 1 (cons (dec (cadr xs)) (cddr xs))))
        (= (cadr xs) 0) ; m is 0: (cons n+1 rest)
          (ack-h (cons (inc (car xs)) (cddr xs)))
        else ; Default: (cons n-1 (cons m (cons m-1 rest)))
          (ack-h (cons (dec (car xs)) (cons (cadr xs) (cons (dec (cadr xs)) (cddr xs)))))))

(define (ack m n)
  (ack-h (list n m)))

(define (g n p)
  (cond (not (< 1 p)) 1
        (not (< p (dec n))) 1
        else (foldl (lambda (res q) (+ res (if (> q (- n p)) 0 (g (- n p) q)))) 1 (range 2 p))))

(define (9-billion-names rows)
  (foldl
    (lambda (res n)
      (string-append
        (apply string-concat res
          (map-eager
            (lambda (p) (string-append (->string (g n p)) " "))
            (range 1 n)))
        "\n"))
    ""
    (range 1 (inc rows))))

(define (test-set-stuff)
  (let ((r (range 0 400))
        (s (->set (xrange -199 200 1)))
        (s1 (->set (xrange 0 399 1))))
    (foldl
      (lambda (r x1)
        (let ((x (rem x1 25)))
          (cond
            (= x 0) (set-size s)
            (= x 1) (set-add s s1)
            (= x 2) (set-union s s1)
            (= x 3) (set-difference s s1)
            (= x 4) (set-intersection s s1)
            (= x 5) (set-includes? s x)
            (= x 6) (set-subset? s s1)
            (= x 7) (set-true-subset? s s1)
            (= x 8) (set-superset? s s1)
            (= x 9) (set-true-superset? s s1)
            (= x 10) (set->vector s)
            (= x 11) (set-eq? s s1)
            (= x 12) (set-size s)
            (= x 13) (set-add s s)
            (= x 14) (set-union s s)
            (= x 15) (set-difference s s)
            (= x 16) (set-intersection s s)
            (= x 17) (set-includes? s s)
            (= x 18) (set-subset? s s)
            (= x 19) (set-true-subset? s s)
            (= x 20) (set-superset? s s)
            (= x 21) (set-true-superset? s s)
            (= x 22) (set->vector s)
            (= x 23) (set-eq? s s)
            (= x 24) (->set r))))
    0 r)))

(define (test-map-stuff)
  (let* ((r (range 0 400))
         (m (->map (range -199 400)))
         (m1 (->map (range 0 799))))
    (foldl
      (lambda (r x1)
        (let ((x (rem x1 12)))
          (cond
            (= x 0) (map-size m)
            (= x 1) (map-get m x)
            (= x 2) (map-set m x x)
            (= x 3) (map-remove m x)
            (= x 4) (map-keys m)
            (= x 5) (map-merge m m1)
            (= x 6) (map-has-key? m x)
            (= x 7) (map-entries m)
            (= x 8) (map->vector m)
            (= x 9) (map-eq? m m1)
            (= x 10) (->map r)
            (= x 11) (map-merge m m))))
      0 r)))


(define (multiplicative-persistance-recur n)
  (let* ((mult-digits
            (lambda (n res)
              (if (= n 0) res (recur (/ n 10) (* res (rem n 10))))))
        (%help
            (lambda (n p)
              (if (< n 10) p (recur (mult-digits n 1) (+ p 1))))))
    (%help n 0)))
(define (multiplicative-persistance-tr n)
  (let* ((mult-digits
            (lambda (n res)
              (if (= n 0) res (mult-digits (/ n 10) (* res (rem n 10))))))
        (%help
            (lambda (n p)
              (if (< n 10) p (%help (mult-digits n 1) (+ p 1))))))
    (%help n 0)))
(define (find-first-with-mp-5 p)
  (cadar (drop-while (lambda (mp) (< (car mp) 5)) (map (lambda (n) (list (p n) n)) (iterate inc 1)))))


(def-macro (test-performance text expr)
  (list 'println! (list 'string-concat (list 'ljust text 50) (list '->string (list 'measure! 'runs (list 'lambda () expr))))))

(let ((runs 100))

(test-performance "Generic utility (Do not change):" (sum-of-divisors 500))

(test-performance "Many math ops:" (-> 5 (+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)(+ 5)(- 5)(* 5)(/ 5)))

(test-performance "Without -> :" (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ 5 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5))

(let ((l (lambda (n) (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ 5 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) n))))
  (test-performance "Many math ops (lambda):" (l 5)))

(let ((l #(/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ (/ (* (- (+ 5 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) 5) %1)))
  (test-performance "Many math ops (hash-lambda):" (l 5)))

(let ((ops (foldr compose id (list (partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)(partial + 5)(partial - 5)(partial * 5)(partial / 5)))))
  (test-performance "Same as partials with composition:" (ops 5)))
  
(test-performance "set operations" (test-set-stuff))

(test-performance "map operations" (test-map-stuff))

(test-performance "(ack 3 4)" (ack 3 4))

(test-performance "lazy sequences" (->> -500 (iterate inc) (filter (lambda (n) (> n 0))) (map inc) (filter odd?) (map inc) (map (partial * 211)) (remove (lambda (n) (= (rem n 5) 0))) (take 50)))

(load! "core/sort.lyra")
(let ((sequence (reverse (range 0 5000))))
  (test-performance "Sort 5000 elements:" (sort sequence)))

(load! "core/random.lyra")
(let ((sequence (range 0 5000)))
  (test-performance "Shuffle 5000 elements:" (shuffle sequence 0xC0FFEE)))

(test-performance "9-billion-names (25):" (9-billion-names 25))

(test-performance "Lots of recur:" (find-first-with-mp-5 multiplicative-persistance-recur))
(test-performance "Lots of tail recursion" (find-first-with-mp-5 multiplicative-persistance-tr))
)


(comment
Times in milliseconds.

ruby lyra.rb benchmark.lyra && jruby lyra.rb benchmark.lyra && truffleruby lyra.rb benchmark.lyra

0.1.1
Ruby:
  Many math ops:                                    0.172832
  Without -> :                                      0.167156
  Many math ops (lambda):                           0.1817575
  Same as partials with composition:                0.3615785
  (ack 3 4)                                         1270.993801
  lazy sequences                                    90.884589
  Sort 5000 elements:                               1123.7094325
  Shuffle 5000 elements:                            1250.69714
jruby:
  Many math ops:                                    1.259
  Without -> :                                      0.7795
  Many math ops (lambda):                           0.903
  Same as partials with composition:                1.6555
  (ack 3 4)                                         2373.7315
  lazy sequences                                    188.454
  Sort 5000 elements:                               1767.841
  Shuffle 5000 elements:                            1942.1085
truffleruby:
  Many math ops:                                    3.2715
  Without -> :                                      2.3735
  Many math ops (lambda):                           2.4485
  Same as partials with composition:                3.527
  (ack 3 4)                                         3539.3155
  lazy sequences                                    323.724
  Sort 5000 elements:                               2212.497
  Shuffle 5000 elements:                            2260.6495

0.1.2
Ruby:
  Many math ops:                                    0.181013
  Without -> :                                      0.226936
  Many math ops (lambda):                           0.185336
  Same as partials with composition:                0.385166
  (ack 3 4)                                         1522.117557
  lazy sequences                                    92.272839
  Sort 5000 elements:                               1135.807441
  Shuffle 5000 elements:                            1270.712288
jruby:
  Many math ops:                                    5.785
  Without -> :                                      5.718
  Many math ops (lambda):                           5.121
  Same as partials with composition:                14.291
  (ack 3 4)                                         2619.426
  lazy sequences                                    294.57
  Sort 5000 elements:                               1832.31
  Shuffle 5000 elements:                            1986.322
truffleruby:
  Many math ops:                                    3.617
  Without -> :                                      3.632
  Many math ops (lambda):                           3.837
  Same as partials with composition:                7.819
  (ack 3 4)                                         3860.883
  lazy sequences                                    757.476
  Sort 5000 elements:                               2667.729
  Shuffle 5000 elements:                            3184.793

0.1.3
Ruby:
  Many math ops:                                    0.1864115
  Without -> :                                      0.176231
  Many math ops (lambda):                           0.188421
  Same as partials with composition:                0.3868515
  set operations                                    1016.8903055
  map operations                                    102.933001
  (ack 3 4)                                         1407.0720605
  lazy sequences                                    91.081921
  Sort 5000 elements:                               1197.091987
  Shuffle 5000 elements:                            5732.311839
  9-billion-names (25):                             1968.749468
jruby:
  Many math ops:                                    1.032
  Without -> :                                      0.71
  Many math ops (lambda):                           0.615
  Same as partials with composition:                2.9775
  set operations                                    1248.1785
  map operations                                    110.2745
  (ack 3 4)                                         2685.5895
  lazy sequences                                    189.463
  Sort 5000 elements:                               1934.5155
  Shuffle 5000 elements:                            7105.594
  9-billion-names (25):                             2210.793
truffleruby:
  Many math ops:                                    2.0545
  Without -> :                                      1.9185
  Many math ops (lambda):                           1.6295
  Same as partials with composition:                3.581
  set operations                                    401.0835
  map operations                                    65.288
  (ack 3 4)                                         3901.222
  lazy sequences                                    277.1035
  Sort 5000 elements:                               2504.6345
  Shuffle 5000 elements:                            5072.2775
  9-billion-names (25):                             952.2655

0.1.4
Ruby:
  Generic utility (Do not change):                  46.4985775
  Many math ops:                                    0.17629
  Without -> :                                      0.171247
  Many math ops (lambda):                           0.1802815
  Same as partials with composition:                0.3844305
  set operations                                    1009.651065
  map operations                                    104.210957
  (ack 3 4)                                         1429.0281425
  lazy sequences                                    48.237935
  Sort 5000 elements:                               1976.7411665
  Shuffle 5000 elements:                            6649.8351395
  9-billion-names (25):                             2056.820817
jruby (Needed to be executed with a console argument to give it more stack-space):
  Generic utility (Do not change):                  218.6605
  Many math ops:                                    0.5975
  Without -> :                                      0.539
  Many math ops (lambda):                           0.519
  Same as partials with composition:                1.427
  set operations                                    1593.4085
  map operations                                    335.7105
  (ack 3 4)                                         6306.3665
  lazy sequences                                    267.2785
  Sort 5000 elements:                               7310.377
  Shuffle 5000 elements:                            21421.8135
  9-billion-names (25):                             6280.6045
truffleruby:
  Generic utility (Do not change):                  151.798
  Many math ops:                                    0.891
  Without -> :                                      0.802
  Many math ops (lambda):                           0.7145
  Same as partials with composition:                2.198
  set operations                                    389.0665
  map operations                                    61.035
  (ack 3 4)                                         3880.0265
  lazy sequences                                    254.784
  Sort 5000 elements:                               2622.209
  Shuffle 5000 elements:                            4988.6715
  9-billion-names (25):                             802.0735
  
0.1.5
Ruby:
  Generic utility (Do not change):                  75.5054225
  Many math ops:                                    0.600394
  Without -> :                                      0.552114
  Many math ops (lambda):                           0.2970455
  Many math ops (hash-lambda):                      0.3133695
  Same as partials with composition:                0.613606
  set operations                                    1311.240537
  map operations                                    172.8876305
  (ack 3 4)                                         2434.115711
  lazy sequences                                    82.0805675
  Sort 5000 elements:                               2257.480892
  Shuffle 5000 elements:                            7425.6210615
  9-billion-names (25):                             2275.9925755
  Lots of recur:                                    396.5961755
  Lots of tail recursion                            393.920175
jruby (Needed to be executed with a console argument to give it more stack-space):
  Generic utility (Do not change):                  98.9905
  Many math ops:                                    0.6335
  Without -> :                                      0.55
  Many math ops (lambda):                           0.531
  Many math ops (hash-lambda):                      0.979
  Same as partials with composition:                1.6485
  set operations                                    1184.258
  map operations                                    117.5925
  (ack 3 4)                                         2957.301
  lazy sequences                                    129.815
  Sort 5000 elements:                               3114.046
  Shuffle 5000 elements:                            8485.3315
  9-billion-names (25):                             2279.9495
  Lots of recur:                                    1505.457
  Lots of tail recursion                            1506.066
truffleruby:
  Generic utility (Do not change):                  151.678
  Many math ops:                                    0.75
  Without -> :                                      0.639
  Many math ops (lambda):                           0.6975
  Many math ops (hash-lambda):                      0.8095
  Same as partials with composition:                2.181
  set operations                                    484.082
  map operations                                    49.878
  (ack 3 4)                                         3936.93
  lazy sequences                                    239.621
  Sort 5000 elements:                               2630.183
  Shuffle 5000 elements:                            4971.0095
  9-billion-names (25):                             754.9675
  Lots of recur:                                    3127.67
  Lots of tail recursion                            3118.387

0.1.6
Ruby:
  Generic utility (Do not change):                  55.007449
  Many math ops:                                    0.193158
  Without -> :                                      0.18994
  Many math ops (lambda):                           0.204649
  Many math ops (hash-lambda):                      0.208954
  Same as partials with composition:                0.809705
  set operations                                    1019.291444
  map operations                                    120.926683
  (ack 3 4)                                         1722.362063
  lazy sequences                                    58.404364
  Sort 5000 elements:                               2302.563464
  Shuffle 5000 elements:                            3419.574222
  9-billion-names (25):                             2363.540445
  Lots of recur:                                    413.819826
  Lots of tail recursion                            402.25105
jruby (Needed to be executed with a console argument to give it more stack-space):
  Generic utility (Do not change):                  246.239
  Many math ops:                                    0.343
  Without -> :                                      0.686
  Many math ops (lambda):                           0.498
  Many math ops (hash-lambda):                      1.113
  Same as partials with composition:                6.3
  set operations                                    1246.995
  map operations                                    120.547
  (ack 3 4)                                         3282.83
  lazy sequences                                    155.405
  Sort 5000 elements:                               3201.624
  Shuffle 5000 elements:                            4266.004
  9-billion-names (25):                             2114.782
  Lots of recur:                                    1766.234
  Lots of tail recursion                            1773.327
truffleruby:
  Generic utility (Do not change):                  374.58
  Many math ops:                                    0.915
  Without -> :                                      0.794
  Many math ops (lambda):                           0.895
  Many math ops (hash-lambda):                      1.291
  Same as partials with composition:                4.197
  set operations                                    918.146
  map operations                                    150.188
  (ack 3 4)                                         4474.144
  lazy sequences                                    383.721
  Sort 5000 elements:                               4608.689
  Shuffle 5000 elements:                            3880.219
  9-billion-names (25):                             1339.033
  Lots of recur:                                    3594.886
  Lots of tail recursion                            3591.484
)

