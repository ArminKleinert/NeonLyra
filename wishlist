

V 0.1.7
- Function definitions and reader errors include line number
- Better sets and maps
- Rename current define to `basic-define` and make new define a macro

0.1.8
- Fixed size integers
- +', -', *', etc. for type expansion (as in Clojure)
- Analyser which finds impure behaviour and constant expressions for 
  - optimization
  - inline candidates
  - Optimization for byte code
- cdr-coding for literal lists
  Maybe a new class CCList can be defined in types.rb which internally uses an Array.
  When list(*args) (currently in line 350) is called, it creates a CCList.
  Functions that should be overridden: each, each_with_index, index, [](i), nth_rest
- $f is the current file, $c the current callstack, $? for last returned value, $! for last error, $m for current module $ms for a list of all imported modules, $glob for the global env, $menv for module env, $env for current env

0.1.9
- Bytecode
- Functions with errors return a special object (Maybe) and can be handled using the "handle" function. If unhandled immediatly after returning, they return their value or crash. Types: warning, error.
  (handle res (read-file! f) ('warning (handle-warning res)) ('error (handle-error res)) ('signal (handle-signal res)) ('success res))
  Once res leaves the 'handle function, it is unwrapped.

V 0.2.0
- Bootstrap module(s)
  - ... 'def-generic ...
  - (if (defined? '::vector) #f (load! "bootstrap/bootstrap-vector.lyra")) ; If '::vector is not defined, load its implementation and generics from bootstrap
  - ... '::set ...
  - ... '::map ...
  - ... '::ratio ...
  - ... '::string ...

V 0.2.1
- call/cc (eventually)



