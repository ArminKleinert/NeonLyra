
(module delay
  (delay delay? force force* evaluated?)

(def-type delay evaluated? expr)

(defmacro (delay expr)
  (list make-delay (box #f) (box expr)))

(define (force obj)
  (cond
    (not (delay? obj)) obj
    @(delay-evaluated? obj) @(delay-expr obj)
    else (begin
          (box-set! (delay-evaluated? obj) #t)
          (box-set! (delay-expr obj) (eval! @(delay-expr obj)))
          @(delay-expr obj))))

(define (force* obj)
  (if (delay? obj)
    (force* (force obj))
    obj))

(define (evaluated? d)
  (if (delay? d)
    @(delay-evaluated? d)
    #t))

(def-impl ::delay unwrap (lambda (d) (force d)))
)
