(module lyra-tokenizer
  (tokenize)

(def-type tokenizer-context tokens is-in-string next-escaped current-text line commented)

(define tokens tokenizer-context-tokens)
(define next-escaped? tokenizer-context-next-escaped)
(define in-string? tokenizer-context-is-in-string)
(define current-text tokenizer-context-current-text)
(define line tokenizer-context-line)
(define commented? tokenizer-context-commented)

(define (escape-next ctx)
  (make-tokenizer-context
    (tokens ctx) (in-string? ctx) #t
    (strcat (current-text ctx) "")
    (line ctx) (commented? ctx)))

(define (add-token ctx)
  (if (or (empty? (current-text ctx)) (commented? ctx))
    ctx
    (make-tokenizer-context
      (cons (current-text ctx) (tokens ctx))
      #f #f ""
      (line ctx) (commented? ctx))))

(define (linebreak ctx1)
  (let ((ctx (add-token ctx1)))
    (make-tokenizer-context
      (tokens ctx) (in-string? ctx)
      (next-escaped? ctx) ""
      (inc (line ctx)) #f)))

(define (open-comment ctx1)
  (let ((ctx (add-token ctx1)))
    (make-tokenizer-context
      (tokens ctx) (in-string? ctx)
      (next-escaped? ctx) ""
      (line ctx) #t)))

(define (append-tkn-text ctx s)
  (make-tokenizer-context
    (tokens ctx) (in-string? ctx) #f
    (strcat (current-text ctx) s)
    (line ctx) (commented? ctx)))

(define (open-string ctx1)
  (let ((ctx (add-token ctx1)))
    (make-tokenizer-context
      (tokens ctx) #t #f "\""
      (line ctx) (commented? ctx))))

(let ((whitespaces (set-of " " "\n" "\t" ","))
      (opening-brackets (set-of "(" "{" "["))
      (closing-brackets (set-of ")" "}" "]"))
      (special-syms (set-of "'" "@")))
(define (parse-char ctx c)
  (if (in-string? ctx)
    (cond
      ((= c "\"") (if (next-escaped? ctx)
                    (append-tkn-text ctx c)
                    (add-token (append-tkn-text ctx c))))
      ((= c "\\") (if (next-escaped? ctx)
                    (append-tkn-text ctx c)
                    (escape-next ctx)))
      (#t (append-tkn-text ctx c)))
    (cond
      ((eq? c "\n") (linebreak ctx))
      ((commented? ctx) ctx)
      ((set-includes? whitespaces c) (add-token ctx))
      ((set-includes? opening-brackets c)
        (add-token (append-tkn-text (add-token ctx) c)))
      ((set-includes? closing-brackets c)
        (add-token (append-tkn-text (add-token ctx) c)))
      ((= c "\"") (open-string ctx))
      ((= c "\\") (append-tkn-text ctx c))
      ((= c ";") (open-comment ctx))
      ((set-includes? special-syms c)
        (add-token (append-tkn-text (add-token ctx) c)))
      (#t (append-tkn-text ctx c)))))
)

(define (tokenize source)
  (let ((ctx (make-tokenizer-context '() #f #f "" 1 #f))
        (end-idx (dec (string-size source)))
        (iter
    (lambda (ctx i)
      (if (> i end-idx)
        ctx
        (recur (parse-char ctx (string-nth source i)) (inc i))))))
  (reverse (tokens (add-token (iter ctx 0))))))

(comment let ((easy (lambda (t) (string-concat "\"" t "\""))))
  (println! (mapv easy (tokenize (file-read! "core/clj.lyra")))))
)
