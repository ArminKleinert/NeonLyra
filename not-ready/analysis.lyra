(module syntax-analysis
  ()

(define codes (apply map-of (flatten (zip-to-index '(
  let
  if
  define
  defmacro
  lazy-seq
  module
  quote
  lazy
  try*
  catch
  expand-macro
  module

  def-type
  def-impl
  def-generic

  let*
  lambda
  cond

  + - * / rem bit-and bit-or bit-xor bit-shl bit-shr
  box unbox
  )))))
define lambda defmacro def-type if let let* module 
cons car cdr list-size 
= < > + - * / rem bit-and bit-or bit-xor bit-shl bit-shr 
box unbox box-set!
defined?
list? box? nothing? boolean? int? float? string? symbol? function?
hash native->string symbol gensym
string-size string-nth string-append
memoize Nothing load! measure! quote typename apply-to
lazy-seq

(define (potential-function? expr)
  (if (list? expr)
    (potential-function? (car expr))
    (or (symbol? expr) (keyword? expr))))

(define (analyse-call expr)
  (let ((f (car expr)))

    )
(define (create-ir exprs)
(if 
)
)





