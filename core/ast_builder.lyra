(load! "core/tokenizer.lyra")

(module lyra-ast-builder
((tokens->lisp build-ast))

(def-type reader tokens position)

(define (new-reader tokens)
  (make-reader (->vector tokens) (box 0)))

(define pos (lambda (r) (unbox (reader-position r))))
(define inc-pos! (lambda (r) (box-set! (reader-position r) (inc (pos r))) r))

(define (peek reader)
  (let ((tokens (reader-tokens reader))
        (position (pos reader)))
    (if (>= position (vector-size tokens))
      #f
      (vector-nth tokens position))))

(define (next reeader)
  (let ((token (peek reader)))
    (if token (begin (inc-pos! reader) token) token)))

(define (read-macro reader sym level)
  (next reader) ; pop
  (let ((f (read-form reader level)))
    (if (list? f)
      (cons sym f)
      (list sym f))))

(define (read-list reader ender proc level)
  (next reader) ; pop
  (let ((loop
      (lambda (items)
        (let ((token (peek reader)))
          (cond
            ((eq? token ender) (begin (next reader) (proc (reverse items))))
            ((not token) (error (string-concat "Expected '" ender "', got EOF")))
            (else (recur (cons (read-form reader level) items))))))))
    (loop '())))

; TODO
(define (parse-symbol token)
  (symbol token))

(define (read-atom reader)
  (let ((token (next reader))
        (i (->int token)))
    (if i
      i
    (let ((f (->float token)))
      (if f
        f
    (cond
      ((not token) (error "End of tokens."))
      ((eq? token "#t") #t)
      ((eq? token "#f") #f)
      ((eq? token "Nothing") Nothing)
      ((eq? token "\"") (error "Unmatched \"")) ; TODO format-string
      (else (parse-symbol token))))))))

(define (read-form reader level)
  (let* ((token (peek reader))
         (code
          (cond
            ((eq? token "'")
              (read-macro reader 'quote (inc level)))
            ((eq? token "@")
              (read-macro reader 'unquote (inc level)))
            ((eq? token "(")
              (read-list reader ")" list (inc level)))
            ((eq? token "[")
              (read-list reader "]" ->vector (inc level)))
            (else
              (read-atom reader)))))
    (if (and (> level 0) (empty? (reader-tokens reader)))
      (error "Unmatched token.")
      code)))

(define (build-ast tokens)
  (let* ((loop (lambda (r acc)
          (if (peek r)
            (recur r (cons (read-form r 0) acc))
            acc)))
         (res (reverse (loop (new-reader tokens) '()))))
    (cons (caar res) (cdr res))))
)

(println! (tokenize "'(1 b 'a  6.6 \"str\" [] [1])"))
(println! (tokens->lisp (tokenize "(list 9 8 7) 99 '(1 b 'a  6.6 \"str'\" [] [1])")))
(println! (tokens->lisp (tokenize "'a")))
