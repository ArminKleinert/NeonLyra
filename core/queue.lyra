(module lyra.core.queue
  ()

  ; deque and queue are implemented as the same type.
  ; A deque is implemented as 2 lists: One for the front and one the back. 
  ; If something is added, it is prepended to the second list.
  ;
  ; (let ((q (queue 1 2))
  ;       (q1 (enqueue-all (queue 1 2) '(4 3))))
  ;   q ; (make-deque (1 2) ())
  ;   (enqueue q 3) ; (make-deque (1 2) (4 3))
  ;   (deque q1) ; (make-deque (2) (4 3))
  ;   (deque (deque q1)) ; (make-deque (3 4) ())
  ;   )
  ; 
  ; first, rest, append and ->list are implemented, so all sequence operations work.
  (def-type deque front back)

  (define (deque & xs)
    (make-deque xs '()))

  (define queue deque)
  (define queue? deque?)

  (define (enqueue q x)
    (if (empty? (deque-front q))
      (make-deque (add (reverse (deque-back q)) x) '())
      (make-deque (deque-front q) (cons x (deque-back q)))))

  (define (dequeue q)
    (if (= (size (deque-front q)) 1)
      (make-deque (reverse (deque-back q)) '())
      (make-deque (cdr (deque-front q)) (deque-back q))))

  (define (enqueue-all q xs)
    (foldl enqueue q xs))

  (define (peek xs)
    (if (vector? xs)
      (vector-nth xs (- (size xs) 1))
      (first xs)))

  (define (pop xs)
    (if (vector? xs)
      (vector-range 0 (- (vector-size xs) 1) xs)
      (rest xs)))

  (define (push xs e)
    (if (list? xs)
      (cons e xs)
      (add xs e)))

  (define (deque-eq? q0 q1)
    (eq? (->list q1) (->list q0)))

  (def-impl ::deque first (lambda (q) (car (deque-front q))))
  (def-impl ::deque rest dequeue)
  (def-impl ::deque add enqueue)
  (def-impl ::deque append enqueue-all)
  (def-impl ::deque prepend (lambda (q xs) (make-deque (append (->list xs) (deque-front q)) (deque-back q))))
  (def-impl ::deque add-front (lambda (q x) (make-deque (cons x (deque-front q)) (deque-back q))))
  (def-impl ::deque last
    (lambda (q)
      (cond (empty? (deque-back q)) (last (deque-front q))
            else (car (deque-back q)))))

  (def-generic xs (->deque xs) (partial enqueue-all (deque)))
  (def-generic xs (->queue xs) ->deque)

  (def-impl ::deque sequence? (lambda (x) #t))
  
  (def-impl ::deque ->list (lambda (q) (append (deque-front q) (reverse (deque-back q)))))
  (def-impl ::deque ->vector (lambda (q) (append [] (append (deque-front q) (reverse (deque-back q))))))
  
  (def-impl ::deque size (lambda (q) (+ (size (deque-front q)) (size (deque-back q)))))
  
  (def-impl ::deque reverse
    (lambda (q)
      (if (empty? (deque-back q))
        (make-deque (reverse (deque-front q)) '())
        (make-deque (deque-back q) (deque-front q)))))

  (def-impl ::deque eq? deque-eq?)

  (def-impl ::deque ->string (lambda (q) (->string (cons 'deque (->list q)))))
)
