(module clj
  (when def defn fn
  (do begin)
  (slurp! file-read!)
  (spit! file-write!)
  (count size)
  (nil Nothing)
  (enumerate zip-to-index)
  (conj add)
  (distinct unique)
  (str string-concat)
  (vec ->vector)
  (not-any? none?)
  (every? all?)
  reduce reductions some some? some-fn
  nthrest nthnext next fnext ffirst nnext
  keep name)

  (def-macro (when p & body)
    (list 'if p (va-cons 'begin Nothing body) Nothing))

  (def-macro (def name val)
    (list 'define name val))

  (define (%defn name bindings body)
    (if (or (string? bindings) (map? bindings))
      (%defn name (car body) (cdr body)) ; ignore docstring or attr-map
      (list 'define name (va-cons 'fn name bindings body))))
  (def-macro (defn name bindings & body)
    (%defn name bindings body))

(define (%fn name bindings body)
  (cond
    (list? bindings) ; Probably multi-fn
      (%multifn name (cons bindings body))
    (vector? bindings)
      (cons 'lambda* (va-cons name (->list bindings) body))
    else (error! "Syntax error: Invalid format for fn." 'syntax)))

(define (%multifn name body)
  (va-cons 'case-lambda* name (map-eager (lambda (xs) (cons (->list (car xs)) (cdr xs))) body)))

(def-macro (fn name & body)
  (cond
    (symbol? name)
      (%fn name (car body) (cdr body))
    (vector? name) ; no name, but actually bindings
      (%fn (gensym 'fn) name body)
    (list? name) ; multi-function
      (%multifn (gensym 'fn) (cons name body))
    else
      (error! "Syntax error: Invalid format for fn." 'syntax)))
  
  (comment define (name x)
    (cond
      (symbol? x) (->string x)
      (keyword? x) (->string (keyword-name x))
      (string? x) x
      else Nothing))
  
  (define (name x)
    (case x
      symbol? (->string x)
      keyword? (->string (keyword-name x))
      string? x
      Nothing))

  (define (nthrest xs i) (drop i xs))
  (define (nthnext xs i) (let ((r (nthrest xs i))) (if (empty? r) Nothing r)))
  (define (next xs) (let ((r (rest xs))) (if (empty? r) Nothing r)))
  (define (fnext xs) (first (next xs)))
  (define (ffirst xs) (first (first xs)))
  (define (nnext xs) (next (next xs)))
  (define (nfirst xs) (next (first xs)))
  
  (define reduce
    (case-lambda* reduce
      ((f s xs) (foldl f s xs))
      ((f xs) (foldl1 f xs))))

  (define reductions
    (case-lambda* reductions
      ((f s xs) (scanl f s xs))
      ((f xs) (scanl1 f xs))))

  (define (some p xs)
    (first (drop-until p xs))); first returns Nothing on empty sequences.

  (define (some? x)
    (not (nothing? x)))

  ; For some reason, clojure returns nil if some gives negative results,
  ; but false for some-fn...
  (define (some-fn p & ps)
    (lambda (& xs)
      (->>
        (repeat xs)
        (zip-with drop-until (cons p ps))
        (remove empty?)
        first first)))
  
  (define (any? x)
    #t)
  
  (define (keep f xs)
    (remove nothing? (map f xs)))
)


