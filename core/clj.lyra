(module clj
  ((when when)
  (def def)
  (defn defn)
  (fn fn)
  (do begin)
  (slurp! file-read!)
  (spit! file-write!)
  (count size)
  (reduce foldl)
  (true #t)
  (false #f)
  (nil Nothing))

  (def-macro (when p & body)
    (list 'if p (cons 'begin (cons Nothing body)) (nothing)))

  (def-macro (def name val)
    (list 'define name val))

  (def-macro (defn name bindings & body)
    (cons 'define (cons (cons name (->list bindings)) body)))

  (def-macro (fn bindings & body)
    (cons 'lambda (cons (->list bindings) body)))

)
