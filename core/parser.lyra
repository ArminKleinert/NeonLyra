(module lyra-parser
()

(def-type parser-context tokens is-in-string next-escaped current-text)

(define tokens parser-context-tokens)
(define next-escaped? parser-context-next-escaped)
(define in-string? parser-context-is-in-string)
(define current-text parser-context-current-text)

(define (escape-next ctx)
  (make-parser-context
    (tokens ctx) (in-string? ctx) #t
    (strcat (current-text ctx) "")))

(define (add-token ctx)
  (if (empty? (current-text ctx))
    ctx
    (make-parser-context
     (cons (current-text ctx) (tokens ctx))
      #f #f "")))

(define (append-tkn-text ctx s)
  (make-parser-context
    (tokens ctx) (in-string? ctx) #f
    (strcat (current-text ctx) s)))

(define (open-string ctx1)
  (let ((ctx (add-token ctx1)))
    (make-parser-context
      (tokens ctx) #t #f
      (strcat (current-text ctx) "\""))))

(let ((whitespaces (set-of " " "\n" "\t"))
      (opening-brackets (set-of "(" "{" "["))
      (closing-brackets (set-of ")" "}" "]"))
      (special-syms (set-of "'" ".!" ".?" "@" "#(" "\"")))
(define (parse-char ctx c)
  (println! c)
  (if (in-string? ctx)
    (cond
      ((= c "\"") (if (next-escaped? ctx) (append-tkn-text ctx c) (add-token (append-tkn-text ctx c))))
      ((= c "\\") (if (next-escaped? ctx) (append-tkn-text ctx c) (escape-next ctx)))
      (#t (append-tkn-text ctx c)))
    (cond
      ((set-includes? whitespaces c) (add-token ctx))
      ((set-includes? opening-brackets c) (add-token (append-tkn-text ctx c)))
      ((set-includes? closing-brackets c) (add-token (append-tkn-text (add-token ctx) c)))
      ((= c "\"") (open-string ctx))
      ((= c "\\") (escape-next ctx))
      (#t (append-tkn-text ctx c)))))
)

(define (tokenize source)
  (let ((ctx (make-parser-context '() #f #f ""))
        (end-idx (dec (string-size source)))
        (iter
    (lambda (ctx i)
      (if (> i end-idx)
        ctx
        (recur (parse-char ctx (string-nth source i)) (inc i))))))
  (add-token (iter ctx 0))))

(let ((easy (lambda (t) (string-concat "\"" t "\""))))
(println! (mapv id (reverse (tokens (tokenize "[(hello world \"!\").!]"))))))
)
