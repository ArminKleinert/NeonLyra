(module lyra.core.random
  ()

(let ((max-32 0xFFFFFFFF)
      (max-64 0xFFFFFFFFFFFFFFFF))

;## Function: xorshift64s
;# xorshift64s : int -> int
;# xorshift64* algorithm.
(define (xorshift64s seed)
  (let* ((x0 (bit-xor seed (bit-shr seed 12)))
         (x1 (bit-xor x0 (bit-shl x0 25)))
         (x2 (bit-xor x1 (bit-shr x1 27))))
    (bit-and (* x2 2685821657736338717) max-64)))

;## Function: xorshift64s
;# xorshift64s : int -> int
;# Alias for xorshift64s.
(define random xorshift64s)

;## Function: xorshift64
;# xorshift64 : int -> int
;# xorshift64 algorithm.
(define (xorshift64 seed)
  (let* ((x0 (bit-xor seed (bit-shl seed 13)))
         (x1 (bit-xor x0 (bit-shr x0 7)))
         (x2 (bit-xor x1 (bit-shl x1 17))))
    (bit-and x2 max-64)))

;## Function: xorshift32
;# xorshift32 : int -> int
;# xorshift32 algorithm.
(define (xorshift32 seed)
  (let* ((x0 (bit-xor seed (bit-shl seed 13)))
         (x1 (bit-xor x0 (bit-shr x0 17)))
         (x2 (bit-xor x1 (bit-shl x1 5))))
    (bit-and x2 max-32)))

;## Function: lfsr32
;# lfsr32 : int -> int
;# lfsr32 algorithm.
(define (lfsr32 x)
  (let* ((x (bit-and x max-32))
         (b (foldl bit-xor x (list (bit-shr x 31) (bit-shr x 28)))))
    (bit-or (bit-shr x 1) (bit-shl b 31))))

;## Function: lfsr
;# lfsr : int -> int
;# lfsr32 algorithm.
(define lfsr lfsr32)

(let ((state (box 0xCAFEBABE)))
  (define (random!)
    (let ((res (xorshift64s (unbox state))))
      (box-set! state res)
      res)))

;## Function: random-seq
;# random-seq : (int -> int) -> int -> sequence
;# Returns a sequence of random numbers from a function and a starting seed.
(define (random-seq f seed)
  (iterate f (f seed)))

;## Function: xorshift64s-seq
;# xorshift64s-seq : int -> sequence
;# Returns a sequence of random numbers generated by repeated application of
;# the xorshift64s algorithm.
(define (xorshift64s-seq seed)
  (random-seq xorshift64s seed))

;## Function: xorshift64-seq
;# xorshift64-seq : int -> sequence
;# Returns a sequence of random numbers generated by repeated application of
;# the xorshift64 algorithm.
(define (xorshift64-seq seed)
  (random-seq xorshift64 seed))

;## Function: xorshift32-seq
;# xorshift32-seq : int -> sequence
;# Returns a sequence of random numbers generated by repeated application of
;# the xorshift32 algorithm.
(define (xorshift32-seq seed)
  (random-seq xorshift32 seed))

;## Function: lfsr32-seq
;# lfsr32-seq : int -> sequence
;# Returns a sequence of random numbers generated by repeated application of
;# the lfsr32 algorithm.
(define (lfsr32-seq seed)
  (random-seq lfsr32 seed))

;## Function: random-nums
;# random-nums : int -> sequence
;# Returns a sequence of random numbers generated by repeated application of
;# a random algorithm (currently xorshift64s.
(define (random-nums seed)
  (random-seq random seed))

;## Function: with-bounds
;# with-bounds : sequence -> int -> int -> sequence
;# Limits every number in a sequence to be in between two numbers.
(define (with-bounds seq min-n max-n)
  (map (lambda (x) (+ (rem x (- (inc max-n) min-n)) min-n)) seq))

(load! "core/sort.lyra")
(import! "lyra.core.sort" "sort")

;## Function: shuffle
;# shuffle : sequence -> int -> sequence
;# Shuffles a sequence using the sort/sort-compare and random-nums algorithms.
(define (shuffle seq seed)
  (map cadr
    (sort/sort-compare (lambda (x y) (compare (car x) (car y)))
      (zip (random-nums seed) seq))))
)
)

