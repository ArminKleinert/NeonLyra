(module tuple
  (list->tuple tuple-size tuple-nth tuple-includes? tuple-eq?)

(define  (list->tuple x) (apply-to tuple x))

(define tuple-size buildin-vector-size)
(define tuple-nth buildin-nth)
(define tuple-includes? contains?)
(define tuple-eq? (lambda(t0 t1) (and (tuple? t0) (eq? t0 t1))))

(def-impl ::tuple ->set buildin->set)
(def-impl ::tuple ->map buildin->map)
(def-impl ::tuple ->vector buildin->vector)
(def-impl ::tuple ->string (lambda (xs) (apply-to tuple (map ->string xs))))
(def-impl ::tuple first car)
(def-impl ::tuple rest cdr)
(def-impl ::tuple eq? (lambda (v0 v1) (if (tuple? v1) (seq-eq? (->vector v0) (->vector v1)) #f)))
(def-impl ::tuple sequence? T)
(def-impl ::tuple collection? T)
(def-impl ::tuple nth buildin-nth)
(def-impl ::tuple contains? (compose contains? ->list))
(def-impl ::tuple size tuple-size)
)

