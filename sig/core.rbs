type lyra_expr = untyped

NOTHING_TYPE: TypeName

BOOL_TYPE: TypeName

VECTOR_TYPE: TypeName

MAP_TYPE: TypeName

LIST_TYPE: TypeName

FUNCTION_TYPE: TypeName

INTEGER_TYPE: TypeName

FLOAT_TYPE: TypeName

SET_TYPE: TypeName

TYPE_NAME_TYPE: TypeName

STRING_TYPE: TypeName

SYMBOL_TYPE: TypeName

BOX_TYPE: TypeName

RATIO_TYPE: TypeName

ERROR_TYPE: TypeName

CHAR_TYPE: TypeName

KEYWORD_TYPE: TypeName

# ALIAS_TYPE = TypeName.new "::alias", 17
DELAY_TYPE: TypeName

GENSYM_CNT: ::Array[Integer]

class Object
  def type_of: (lyra_expr x) -> TypeName

  def type_id_of: (lyra_expr x) -> Integer

  def elem_to_s: (lyra_expr e) -> String

  def elem_to_pretty: (lyra_expr e) -> String

  def eager: (lyra_expr x) -> lyra_expr

  def lyra_buildin_eq?: (lyra_expr x, lyra_expr y) -> bool

  def gensym: (Symbol|String x) -> Symbol

  def div: (Numeric x, Numeric y) -> Numeric?

  def rem: (Numeric x, Numeric y) -> Numeric?

  def truthy?: (lyra_expr x) -> bool

  def string_to_chars: (String s) -> Array[LyraChar]
                     | (lyra_expr s) -> nil

  def apply_op_to_list: (Enumerable[lyra_expr] xs) { (lyra_expr, lyra_expr) -> lyra_expr } -> bool

  def setup_add_fn: (Symbol name, Integer min_args, ?Integer max_args) { () -> untyped } -> Env

  def setup_add_fn_with_env: (Symbol name, Integer min_args, ?Integer max_args) { () -> untyped } -> Env

  def setup_add_var: (Symbol name, lyra_expr value) -> Env

  # Sets up the core functions and variables. The functions defined here are
  # of the type NativeLyraFn instead of LyraFn. They can not make use of tail-
  # recursion and are supposed to be very simple.
  def setup_core_functions: () -> true
end
