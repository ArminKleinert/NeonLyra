class LyraModule
  attr_reader name: Symbol

  attr_reader abstract_name: Symbol

  attr_reader bindings: Array[Symbol]

  def initialize: (Symbol name, Symbol abstract_name, Array[Symbol] bindings) -> void
end

class LyraError < StandardError
  attr_reader info: untyped

  attr_reader internal_trace: untyped

  def initialize: (String msg, ?::Symbol info, ?untyped? trace) -> void
end

module Unwrapable
end

module Lazy
end

module ConsList[T]
  include Enumerable[T]

  def each: () { (T) -> untyped } -> ConsList[T]

  def index: (Integer o) -> (Integer | -1)

  def each_with_index: () { (T, Integer) -> untyped } -> T

  def to_s: () -> ::String

  def inspect: () -> ::String

  def nth: (Integer i) -> T

  def []: (Integer i) -> T
        | (Range[Integer] i) -> ConsList[T]

  def first: () -> T

  def drop: (Integer n) -> ConsList[T]

  def +: (Enumerable[T] c) -> ConsList[T]

  def ==: (untyped c) -> bool

  def force: () -> ConsList[T]
end

class EmptyList[T]
  include Singleton

  include Enumerable[T]

  include ConsList[T]

  def car: () -> nil

  def cdr: () -> ConsList[T]

  def empty?: () -> true

  def size: () -> 0
end

class List[T]
  include Enumerable[T]

  include ConsList[T]

  @car: T
  @cdr: ConsList[T] | LyraFn
  @size: Integer

  def initialize: (T head, ConsList[T] | LyraFn tail, Integer size) -> void

  def car: () -> T

  def cdr: () -> (ConsList[T] | LyraFn)

  def size: () -> Integer

  # ONLY PROVIDED FOR THE EVALUATION FUNCTION!!!
  def set_car!: (T c) -> ConsList[T]

  # ONLY PROVIDED FOR THE EVALUATION FUNCTION!!!
  def set_cdr!: (ConsList[T] tail) -> ConsList[T]

  def self.create: [T] (T head, ConsList[T] | LyraFn tail) -> ConsList[T]

  def empty?: () -> false

  def evaluate: () -> ConsList[T]
end

# CDR-coded list
# This is basically a list backed by an array. It has to override some operations
# that every list must support.
#   car, cdr
# For performance-gain, it must also override the following:
#   each, each_with_index, [](i), size, to_a, nth_rest
# As it will be used by the interpreter internally, set_car! and set_cdr! must also 
# be overridden (sadly),
# A CdrCodedList is never empty. CdrCodedList.create ensures that it becomes an 
# instance of EmptyList.
class CdrCodedList[T] < List[T]
  include Enumerable[T]

  include ConsList[T]

  @content_arr: Array[T]

  def initialize: (Array[T] content_arr) -> void

  def car: () -> T

  def cdr: () -> ConsList[T]

  def set_car!: (T new_car) -> ConsList[T]

  def set_cdr!: (ConsList[T] new_cdr) -> ConsList[T]

  def empty?: () -> false

  def each: () { (T) -> untyped } -> ConsList[T]

  def each_with_index: () { (T, Integer) -> untyped } -> ConsList[T]

  def to_a: () -> Array[T]

  def []: (Integer i) -> T?

  def size: () -> Integer

  def nth_rest: (Integer n) -> ConsList[T]

  def self.create: [T] (Array[T]? content_arr) -> ConsList[T]
end

class ListPair[T]
  include Enumerable[T]

  include ConsList[T]

  def self.create: [T] (ConsList[T] firstList, ConsList[T] secondList) -> ConsList[T]

  attr_reader list0: ConsList[T]

  attr_reader list1: ConsList[T]

  def initialize: (ConsList[T] list0, ConsList[T] list1) -> void

  def car: () -> T?

  def cdr: () -> ConsList[T]

  # ONLY PROVIDED FOR THE EVALUATION FUNCTION!!!
  def set_car!: (T c) -> ConsList[T]

  # ONLY PROVIDED FOR THE EVALUATION FUNCTION!!!
  def set_cdr!: (ConsList[T] tail) -> ConsList[T]

  def size: () -> Integer

  def empty?: () -> bool

  def each: () { (T) -> untyped } -> ConsList[T]

  def compact: () -> ConsList[T]
end

class Box[T]
  include Unwrapable

  attr_accessor value: T

  def initialize: (T value) -> void

  def to_s: () -> ::String

  def unwrap: () -> T
end

# Thrown when a tail-call should be done.
class TailCall[T] < StandardError
  attr_reader args: Enumerable[T]

  def initialize: (Enumerable[lyra_expr] args) -> void
end

# Parent for both native and user-defined functions.
class LyraFn
  def apply_to: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr

  # Provided by child classes
  def call: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr
end

class LazyLyraFn < Proc
  def self.create: (LyraFn f, Env env) -> LazyLyraFn
end

# A Lyra-function. It knows its argument-count (minimum and maximum),
# body (the executable function), name and whether it is a macro or not.
class CompoundFunc < LyraFn
  @body_expr: ConsList[lyra_expr]

  @definition_env: Env?

  @is_hash_lambda: bool

  attr_reader args_expr: Enumerable[lyra_expr]

  attr_reader arg_counts: Range[Integer]

  attr_accessor name: Symbol

  attr_reader is_macro: bool

  def initialize: (Symbol name, Enumerable[lyra_expr] args_expr, ConsList[lyra_expr] body_expr, Env? definition_env, bool is_macro, Integer min_args, ?Integer max_args, ?bool is_hash_lambda) -> void

  def call: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr

  def to_s: () -> ::String

  def inspect: () -> String

  def native?: () -> false

  def pure?: () -> bool
end

class NativeLyraFn < LyraFn
  attr_reader arg_counts: Range[Integer]

  attr_reader name: Symbol

  attr_reader body: Proc

  def initialize: (Symbol name, Integer min_args, ?Integer max_args) { () -> untyped } -> void

  def call: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr

  def to_s: () -> ::String

  def inspect: () -> String

  def native?: () -> true

  def is_macro: () -> false

  def pure?: () -> bool
end

class PartialLyraFn < LyraFn
  @args: ConsList[lyra_expr]
  @func: LyraFn

  @name: Symbol

  def initialize: [T] (LyraFn func, ConsList[T] args) -> void

  def call: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr

  def to_s: () -> String

  def name: () -> Symbol

  def native?: () -> bool

  def pure?: () -> bool

  def is_macro: () -> bool
end

class MemoizedLyraFn < LyraFn
  def initialize: (LyraFn func) -> void

  def call: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr

  def to_s: () -> String

  def native?: () -> bool

  def pure?: () -> bool

  def is_macro: () -> bool

  def name: () -> Symbol
end

class GenericFn < LyraFn
  @anchor_idx: Integer
  @fallback: LyraFn

  @implementations: Hash[Integer, LyraFn]

  attr_reader name: Symbol

  def initialize: (Symbol name, Integer num_args, Integer anchor_idx, LyraFn fallback) -> void

  def call: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr

  def to_s: () -> ::String

  def native?: () -> false

  def pure?: () -> bool

  def is_macro: () -> false

  def add_implementation!: (TypeName `type`, LyraFn impl) -> GenericFn
end

class WrappedLyraError
  attr_reader msg: String

  attr_reader info: Symbol

  attr_reader trace: untyped

  def initialize: (String msg, Symbol info, ?untyped? trace) -> void
end

class TypeName
  attr_reader name: Symbol

  attr_reader type_id: Integer

  def initialize: (Symbol | String name, Integer type_id) -> void

  def to_s: () -> String

  def to_sym: () -> Symbol
end

class LyraDelay
  include Lazy

  include Unwrapable

  def initialize: (Thread thread) -> void

  # if the thread is alive, return nil
  # otherwise, return its value
  def unbox: () -> lyra_expr

  def value: () -> lyra_expr

  # Eagerly run the thread with no timeout
  # if the thread fails (with an error), return the error
  # otherwise, return the value
  def evaluate: () -> lyra_expr

  # Wait `seconds` seconds before killing the thread
  # (if necessary) and getting its value
  def with_timeout: (Float seconds) -> lyra_expr
end

class LyraChar
  attr_reader chr: String

  def self.conv: (String s) -> LyraChar?

  def initialize: (String|Integer s) -> void

  def to_i: () -> Integer

  def to_s: () -> String

  def inspect: () -> String

  def ord: () -> Integer

  def ==: (untyped other) -> bool

  def eql?: (untyped other) -> bool

  def hash: () -> Integer
end

KEYWORDS: Hash[Symbol, Keyword]

class Keyword < LyraFn
  attr_reader name: Symbol

  def initialize: (Symbol name) -> void

  def self.create: (Symbol name) -> Keyword

  def ==: (untyped other) -> bool

  def eql?: (untyped other) -> bool

  def to_s: () -> String

  def inspect: () -> String

  def to_sym: () -> Symbol

  def hash: () -> Integer

  def call: (Enumerable[lyra_expr] args, Env? env) -> lyra_expr

  def native?: () -> true

  def pure?: () -> true

  def is_macro: () -> false
end

class LyraType
  include Unwrapable

  attr_reader name: TypeName

  attr_reader type_id: Integer

  attr_reader attrs: Array[lyra_expr]

  def initialize: (Integer type_id, TypeName name, Array[lyra_expr] attrs) -> void

  def to_s: () -> ::String

  def inspect: () -> String

  def unwrap: () -> Array[lyra_expr]
end

LYRA_TYPE_COUNTER: Box[Integer]

class Object
  def list_append: [T] (*(Enumerable[T]) lists) -> ConsList[T]

  # As list_append, but take an array without spreading.
  def list_append1: [T] (Array[Enumerable[T]] lists) -> ConsList[T]

  def cons: [T] (T e, ConsList[T] | LyraFn l) -> ConsList[T]

  def cons?: (lyra_expr l) -> bool
           | [T] (ConsList[T] l) -> true

  def random_access?: [T] (Enumerable[T] e) -> bool

  def list: [T] (*T args) -> ConsList[T]

  def cdr_list: [T] (Enumerable[T] args) -> ConsList[T]

  def car: [T] (ConsList[T] e) -> T

  def cdr: [T] (ConsList[T] e) -> ConsList[T]

  # Convenience functions.
  def first: [T](ConsList[T] c) -> T?

  def second: [T](ConsList[T] c) -> T?

  def third: [T](ConsList[T] c) -> T?

  def fourth: [T] (ConsList[T] c) -> T?

  def rest: [T] (ConsList[T] c) -> ConsList[T]
          | [T] (Array[T] c) -> Array[T]

  def atom?: (lyra_expr x) -> bool

  def new_lyra_type: (Symbol name, Enumerable[lyra_expr] attrs, Env env) -> Symbol
end
