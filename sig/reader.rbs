LYRA_REGEX: Regexp

class Object
  def tokenize: (String s) -> Enumerable[String]

  def parse_str: (String token) -> String

  def parse_char: (String token) -> LyraChar?

  def prefixed_ast: (Symbol sym, Enumerable[String] tokens, Integer level) -> lyra_expr

  def raise_if_unexpected: (String expected, String t, Integer level) -> void

  def read_number: (String t) -> Numeric

  def read_symbol: (String t) -> (Symbol?|ConsList[lyra_expr])

  def make_ast: (Enumerable[String] tokens, ?::Integer level, ?::String expected, ?bool stop_after_1) -> (Array[lyra_expr] | ConsList[lyra_expr])
end
