


(defmacro (lambda1' binds body1 & body)
  (let ((named (symbol? binds))
        (name (if named binds (gensym 'lambda)))
        (binds (if named body1 binds))
        (body (if named body (cons body1 body)))
        (bind-aliases (map #(if (= %1 '&) '& (gensym 'bind)) binds)))
    (list 'lambda* name bind-aliases (cons 'let (cons (remove #(= (car %1) '&) (zip binds bind-aliases)) body)))))

(expand-macro loop (([a & as] [0 1 2 3 4 5 6 7 8 9])) (println! as) (if (empty? as) a (recur as)))

(println! (expand-macro let (([a & as] [1 2 3 4]))
  as))
(let (([a & as] [1 2 3 4]))
  as)

