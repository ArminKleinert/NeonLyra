
(def-type tree left key value right)

(define (l tree)
  (if (nothing? tree) Nothing (tree-left tree)))

(define (r tree)
  (if (nothing? tree) Nothing (tree-right tree)))

(define (k tree)
  (if (nothing? tree) Nothing (tree-key tree)))

(define (v tree)
  (if (nothing? tree) Nothing (tree-value tree)))

(define (find key tree)
  (cond ((nothing? tree) Nothing)
        ((= (k tree) key) (v tree))
        ((< (k tree) key) (find key (r tree)))
        (else (find key (r tree)))))

(define (set key val tree)
  (cond ((nothing? tree) (make-tree Nothing key val Nothing))
        ((= (k tree) key) (make-tree Nothing key val Nothing))
        ((< (k tree) key) (make-tree (l tree) (k tree) (v tree) (set key val (r tree))))
        (else (make-tree (set key val (l tree)) (k tree) (v tree) (r tree)))))

(define (empty-tree)
  Nothing)

(define (tree-post-to-stack tree)
  (if (nothing? tree)
    '()
    (append (tree-post-to-stack (l tree)) (cons (list (k tree) (v tree)) (tree-post-to-stack (r tree))))))

(define (tree-post-order f tree)
(map-eager f (tree-post-to-stack tree)))

(define (tree->list tree)
  (tree-post-to-stack tree))

(define (tree-vals->list tree)
  (map-eager car (tree-post-to-stack tree)))

(define (list->tree l)
  (foldr (lambda (e t) (set (car e) (cadr e) t)) (empty-tree) (zip-to-index l).!))


