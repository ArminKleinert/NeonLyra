(module vector
()

(define factor 5)
(def-type vect size inner)

(define (%list->vect xs)
  (if (empty? xs)
    '()
    (cons (take factor xs) (%list->vect (drop factor xs)))))

(define (list->vect xs)
  (make-vect (size xs) (%list->vect xs)))

(define (vect->list v)
  (foldr (lambda (x res) (append x res)) '() (vect-inner v)))

(define (vect-get v i)
  (let ((bucket-idx (/ i factor))
        (idx (rem i factor)))
    (nth (nth (vect-inner v) bucket-idx) idx)))

(println! (list->vect (doall! (range 50 100))))

(println! (vect->list (list->vect (doall! (range 50 100)))))

(println! (vect-get (list->vect (doall! (range 49 100))) 5))
(println! (vect-get (list->vect (doall! (range 49 100))) 0))
)
