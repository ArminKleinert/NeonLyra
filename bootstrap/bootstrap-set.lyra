(module bootstrap-set
  (set-of1
   set->list1
   set-size1
   set-add1
   set-union1
   set-difference1
   set-intersection1
   set-includes?1
   set-subset?1
   set-true-subset?1
   set-superset?1
   set-true-superset?1
   set-remove1
   set-eq?1
   set-powerset1
   list->set1)

;;;;;
; Simple but bad list-set implementation.

; set? is automatically defined
(def-type set1 vals)

(define (uniq xss)
  (foldl
    (lambda (res xs) (cons xs (remove (partial eq? xs) res)))
    '() xss))

(define (list->set1 xs)
  (make-set1 (uniq xs)))

(define (set-of1 & vals)
  (list->set1 vals))

(define set->list1 set1-vals)

(define (set-size1 set)
  (list-size (set->list1 set)))

(define (set->vector1 set)
  (list->vector (set->list1 set)))

(define (set-add1 set v)
  (if (set-includes?1 set v)
    set
    (make-set1 (cons v (set->list1 set)))))

(define (set-union1 set0 set1)
  (make-set1 (list-concat (set-difference1 set0 set1) set1)))

(define (set-difference1 set0 set1)
  (make-set1
    (list-concat
      (remove (lambda (e) (set-includes?1 set1 e)) (set->list1 set0)))))

(define (set-intersection1 set0 set1)
  (make-set1 (filter (lambda (e) (set-includes?1 set1 e)) (set->list1 set0))))

(define (set-includes?1 set v)
  (contains? (set->list1 set) v))

(define (set-subset?1 xs ys)
  (all? (lambda (e) (set-includes?1 ys e)) xs))

(define (set-true-subset?1 xs ys)
  (and (< (set-size1 xs) (set-size1 ys)) (set-subset? xs ys)))

(define (set-superset?1 xs ys)
  (set-subset? ys xs))

(define (set-true-superset?1 xs ys)
  (set-true-subset?1 ys xs))

(define (set-remove1 set v)
  (make-set1 (remove (lambda (e) (= e v)) (set->list1 set))))

(define (set-eq?1 xs ys)
  (and (= (set-size1 xs) (set-size1 ys))
       (= 0 (set-size1 (set-difference1 xs ys)))))

(let*((%powerset
        (lambda (xs) (if (empty? xs) '()
          (foldr append '() 
            (map powerset1 (map (lambda (x) (remove (partial eq? x) xs)) xs))))))
      (powerset1
        (lambda (xs) (uniq (add (%powerset xs) xs)))))
(define (set-powerset1 xss)
  (list->set1 (powerset1 (set->list1 set))))
)

(def-impl ::set1 eq? (lambda (s0 s1) (and (set1? s1) (set-eq?1 s0 s1))))
(def-impl ::set1 ->list set->list1)
)
