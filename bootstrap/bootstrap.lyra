(define (list & xs) xs)

(define (list-empty? l)
  (= (list-size l) 0))

; Private
(define (list-append l0 l1)
  (if (= (list-size l0) 0)
    l1
    (list-append (cdr l0) (cons (car l0) l1))))

(define (list-concat l0 & ls)
  (foldr1 list-append (cons l0 ls)))







(define (iterate-seq-p-helper pred func acc vec index)
  (cond
    ((empty? vec) acc)
    ((not (pred acc (first vec) index)) acc)
    (#t (iterate-seq-p-helper pred func
          (func acc (first vec) index) (rest vec) (inc index)))))

(define (iterate-seq-p pred func acc vec)
  (iterate-seq-p-helper pred func acc vec 0))

(define (iterate-seq func acc vec)
  (iterate-seq-p-helper (lambda (x y z) #t) func acc vec 0))



(define (box? x) (is-a? x ::box))
(define (nothing? x) (= x Nothing))
(define nil? nothing?)
(define (null? x) (or (nothing? x) (empty? x)))
(define (list? x) (is-a? x ::list))
(define (int? x) (is-a? x ::integer))
(define (float? x) (is-a? x ::float))
(define (string? x) (is-a? x ::string))
(define (symbol? x) (is-a? x ::symbol))
(define (char? x) (and (string? x) (= 1 (size x))))
(define (boolean? x) (or (= x #t) (= x #f)))
(define (map? x) (is-a? x ::map))
(define (function? x) (is-a? x ::function))




(define (id x) x)
(define (copy x) (if (box? x) (box (unbox x)) x))

(define (buildin-foldr f v xs)
  (if xs
    (f (first xs) (buildin-foldr f v (rest xs)))
    v))

(define (buildin-foldl f v xs)
  (if xs
    (recur f (f v (first xs)) (rest xs))
    v))

(define (buildin-append xs ys)
  (list-append (->list xs) (->list ys)))

(define (buildin-contains? xs e)
  (cond ((list? xs) (any? (lambda (x) (eq? e x)) xs))
        ((vector? xs) (any? (lambda (x) (eq? e x)) xs))
        ((set? xs) (set-includes? xs e))
        ((map? xs) (map-has-key? xs e))
        (else #f)))

(comment
id
copy

buildin-foldr
buildin-foldl
buildin-append
buildin-contains?
buildin-nth

buildin->symbol
buildin->string
buildin->bool
buildin->list
buildin->vector
buildin->map
buildin->set

set-size
map-size
string-range

vector
vector-size
vector-range
vector-nth
vector-add
vector-append
vector-includes?
vector-eq?

map-of
map-size
map-get
map-set
map-remove
map-keys
map-merge
map-has-key?
map-has-value?
map-entries
map->vector
map-eq?

set-of
set-size
set-add
set-union
set-difference
set-intersection
set-includes?
set-subset?
set-true-subset?
set-superset?
set-true-superset?
set->vector
set-eq?
)









