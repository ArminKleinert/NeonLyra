;## Function: queens
; queens : int -> list 
; Calculates all solutions for the nqueens problem on a nxn field.
; Format: (3 1 4 2) (for a 4x4 field with `(queens 4)`) means 
;         - - x -
;         x - - -
;         - - - x
;         - x - -
; (queens 3)        => ()
; (queens 4)        => ((3 1 4 2) (2 4 1 3))
; (size (queens 8)) => 92 ; There are 92 possible arrangements of 8 queens on an 8x8 field!
; Source: http://albertnetymk.github.io/2018/02/16/queens/
(define (queens n)
  (let ((one-to-n (xrange 1 (inc n)))
        (init-board (list (list '() one-to-n)))
        (queens-loop
          (lambda* qloop (boards counter)
            (if (= counter n)
              (filter id boards) ; Remove empty results
              (queens-loop (mapcat expand boards) (inc counter)))))
        (expand
          (lambda' qexpand ((board candidates))
            (for ((x candidates)
                  (:when (safe x board)))
              [(cons x board) (remove (partial eq? x) candidates)])))
        (safe
          (lambda* qsafe (x board)
            (all? id
              (for (((n0 c) (zip-to-index board))
                    (:let ((n (inc n0)))))
                (and (/= x (+ c n))
                     (/= x (- c n))))))))
    (map first (queens-loop init-board 0))))

(queens 4) 



