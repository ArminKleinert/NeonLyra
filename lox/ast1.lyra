(module lyx
(binary call get-expr set-expr unary literal logical variable group print-stmt return-stmt var-stmt assign block if-stmt while-stmt fun-stmt class-stmt this-expr super)

(define (binary left op right)
  (map-of :type :binary :left left :right right :operator op))

(define (call callee paren arguments)
  (map-of :type :call :callee callee :paren paren :arguments arguments))

(define (get-expr object name-token)
  (map-of :type :get-expr :object object :name-token name-token))

(define (set-expr object name-token value)
  (map-of :type :set-expr :object object :name-token name-token :value value))

(define (unary operator right)
  (map-of :type :unary :operator operator :right right))

(define (literal value)
  (map-of :type :literal :value value))

(define (logical left operator right)
  (map-of :type :logical :left left :right right :operator operator))

(define (variable name-token)
  (map-of :type :variable :name-token name-token))

(define (group expression)
  (map-of :type :group :expression expression))

(define (print-stmt expression)
  (map-of :type :print-stmt :expression expression))

(define (return-stmt keyword value)
  (map-of :type :return-stmt :keyword keyword :value value))

(define (var-stmt name-token initializer)
  (map-of :type :var-stmt :name-token name-token :initializer initializer))

(define (assign name-token value)
  (map-of :type :assign :name-token name-token :value value))

(define (block statements)
  (map-of :type :block :statements statements))

(define (if-stmt condition, then-branch, else-branch)
  (map-of :type :if-stmt :condition condition :then-branch then-branch :else-branch else-branch))

(define (while-stmt condition body)
  (map-of :type :while-stmt :condition condition :body body))

(define (fun-stmt name-token params body)
  (map-of :type :fun-stmt :name-token name-token :params params :body body))

(define (class-stmt name-token superclass methods)
  (map-of :type :class-stmt :name-token name-token :superclass superclass :methods methods))

(define (this-expr keyword)
  (map-of :type :this-expr :keyword keyword))

(define (super keyword method)
  (map-of :type :super :keyword keyword :method method))
)
